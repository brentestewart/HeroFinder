@rendermode InteractiveAuto

@page "/herodetails/{id:int}"
@page "/herodetails/{id:int}/{returnUrl?}"

@inject HeroApiService HeroApiService
@inject NavigationManager Navigation

<div class="hero-details-bg">
    @if (hero == null)
    {
        <div class="loading-container">
            <div class="loading-card">
                <h2 class="loading-text">Loading hero details...</h2>
                <div class="loading-spinner"></div>
            </div>
        </div>
    }
    else
    {
        <div class="hero-details-container">
            <div class="back-button-container">
                <button class="back-button @(hero.Universe == "Marvel" ? "marvel-back" : "dc-back")" @onclick="GoBack">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 12H5M12 19L5 12L12 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Back
                </button>
            </div>
            <div class="hero-details-card @(hero.Universe == "Marvel" ? "marvel-theme" : "dc-theme")">
                <div class="hero-image-section">
                    <div class="hero-image-wrapper">
                        <img src="@hero.ImageLink" alt="@hero.HeroName" class="hero-main-image" />
                        <div class="universe-badge @(hero.Universe == "Marvel" ? "marvel-badge" : "dc-badge")">
                            @hero.Universe
                        </div>
                        <button class="details-favorite-button @(hero.IsFavorite ? "favorited" : "")" 
                                @onclick="ToggleFavorite"
                                title="@(hero.IsFavorite ? "Remove from favorites" : "Add to favorites")">
                            <svg width="28" height="28" viewBox="0 0 24 24" fill="@(hero.IsFavorite ? "#FDD835" : "none")" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z" 
                                      stroke="@(hero.IsFavorite ? "#FDD835" : "#FAFAFA")" 
                                      stroke-width="2" 
                                      stroke-linejoin="round"/>
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="hero-info-section">
                    <h1 class="hero-title">@hero.HeroName</h1>
                    <div class="hero-details-grid">
                        <div class="detail-item">
                            <span class="detail-label">Secret Identity:</span>
                            <span class="detail-value">@hero.SecretIdentity</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Universe:</span>
                            <span class="detail-value">@hero.Universe</span>
                        </div>
                        <div class="detail-item abilities-item">
                            <span class="detail-label">Abilities:</span>
                            <div class="abilities-list">
                                @foreach (var ability in hero.Abilities)
                                {
                                    <span class="ability-tag @(hero.Universe == "Marvel" ? "marvel-ability" : "dc-ability")">@ability</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int id { get; set; }
    
    [Parameter]
    public string? returnUrl { get; set; }
    
    private Hero? hero;

    protected override async Task OnParametersSetAsync()
    {
        if (id > 0)
        {
            hero = await HeroApiService.GetHeroByIdAsync(id);
        }
    }

    private void GoBack()
    {
        if (!string.IsNullOrEmpty(returnUrl))
        {
            Navigation.NavigateTo(Uri.UnescapeDataString(returnUrl));
        }
        else
        {
            Navigation.NavigateTo("/heroindex"); // fallback
        }
    }

    private async Task ToggleFavorite()
    {
        if (hero == null) return;

        var newFavoriteStatus = !hero.IsFavorite;
        var success = await HeroApiService.UpdateHeroFavoriteAsync(hero.Id, newFavoriteStatus);
        
        if (success)
        {
            hero.IsFavorite = newFavoriteStatus;
            StateHasChanged();
        }
    }
}
