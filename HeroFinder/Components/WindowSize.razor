@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="window-size-bg">
    <h3 class="window-size-title">Window Size</h3>
    <p class="window-size-desc">This updates from JavaScript via a .NET callback.</p>
    <div class="window-size-card">
        <span class="window-size-value">@_width</span> × <span class="window-size-value">@_height</span> <span class="window-size-unit">px</span>
    </div>
    <button class="window-size-btn" @onclick="ToggleListening">
        @(_listening ? "Stop listening" : "Start listening")
    </button>
</div>

<style>
.window-size-bg {
    background: #FAFAFA;
    border-radius: 24px;
    box-shadow: 0 8px 32px #21212122;
    padding: 20px 32px;
    margin: 16px auto;
    max-width: 520px;
    min-width: 320px;
    text-align: center;
}
.window-size-title {
    font-family: 'Bangers', Impact, 'Arial Black', Arial, sans-serif;
    font-size: 2rem;
    color: #212121;
    margin-bottom: 8px;
    letter-spacing: 2px;
    text-shadow: 1px 1px 6px #FAFAFA99, 0 2px 8px #1E88E544;
}
.window-size-desc {
    color: #212121;
    font-size: 1rem;
    margin-bottom: 18px;
    opacity: 0.8;
}
.window-size-card {
    background: #FAFAFA;
    border: 3px solid #E53935;
    border-radius: 16px;
    box-shadow: 0 4px 16px #1E88E533;
    padding: 18px 0;
    margin-bottom: 18px;
    font-size: 1.5rem;
    font-weight: bold;
    color: #212121;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
}
.window-size-value {
    color: #212121;
    font-size: 2rem;
    font-family: 'Bangers', Impact, 'Arial Black', Arial, sans-serif;
    text-shadow: 1px 1px 6px #FAFAFA99, 0 2px 8px #1E88E544;
}
.window-size-unit {
    color: #FDD835;
    font-size: 1.2rem;
    font-weight: bold;
}
.window-size-btn {
    background: #E53935;
    color: #FAFAFA;
    border: 2px solid #FDD835;
    border-radius: 32px;
    font-size: 1rem;
    font-family: Impact, Bangers, 'Arial Black', Arial, sans-serif;
    padding: 10px 28px;
    cursor: pointer;
    box-shadow: 0 2px 8px #1E88E533;
    transition: background 0.2s, border-color 0.2s;
    font-weight: bold;
    letter-spacing: 1px;
}
.window-size-btn:hover {
    background: #1E88E5;
    border-color: #E53935;
    color: #FDD835;
}
</style>

@code
{
    private IJSObjectReference? _module;
    private DotNetObjectReference<WindowSize>? _dotNetRef;
    private int _width;
    private int _height;
    private bool _listening;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the ES module once the component is interactive
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/resizeHandler.js");

            // Create a .NET reference for JS to call back into this instance
            _dotNetRef = DotNetObjectReference.Create(this);

            // Optional: auto-start. Comment out if you prefer manual start.
            await StartListeningAsync();
        }
    }

    private async Task ToggleListening()
    {
        if (_listening)
            await StopListeningAsync();
        else
            await StartListeningAsync();
    }

    private async Task StartListeningAsync()
    {
        if (_module is null || _dotNetRef is null || _listening) return;
        await _module.InvokeVoidAsync("registerResize", _dotNetRef);
        _listening = true;
        StateHasChanged();
    }

    private async Task StopListeningAsync()
    {
        if (_module is null || !_listening) return;
        await _module.InvokeVoidAsync("unregisterResize");
        _listening = false;
        StateHasChanged();
    }

    // This method is callable from JavaScript
    [JSInvokable]
    public void OnResize(int width, int height)
    {
        _width = width;
        _height = height;
        // No await needed; we’re already on the renderer sync context
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_module is not null && _listening)
            {
                await _module.InvokeVoidAsync("unregisterResize");
            }
        }
        catch { /* ignore if circuit disposed */ }
        finally
        {
            _dotNetRef?.Dispose();
            if (_module is not null)
            {
                try { await _module.DisposeAsync(); } catch { }
            }
        }
    }
}